import java.util.*;

public class DijkstraAlgorithm {
    static class Node implements Comparable<Node> {
        int vertex;
        int weight;

        public Node(int vertex, int weight) {
            this.vertex = vertex;
            this.weight = weight;
        }

        @Override
        public int compareTo(Node other) {
            return Integer.compare(this.weight, other.weight);
        }
    }

    static class Graph {
        int vertices;
        List<List<Node>> adjList;

        public Graph(int vertices) {
            this.vertices = vertices;
            this.adjList = new ArrayList<>(vertices);
            for (int i = 0; i < vertices; i++) {
                this.adjList.add(new ArrayList<>());
            }
        }

        public void addEdge(int source, int destination, int weight) {
            adjList.get(source).add(new Node(destination, weight));
            adjList.get(destination).add(new Node(source, weight)); // for undirected graph
        }

        public int[] dijkstra(int source) {
            int[] dist = new int[vertices];
            Arrays.fill(dist, Integer.MAX_VALUE);
            dist[source] = 0;

            PriorityQueue<Node> minHeap = new PriorityQueue<>();
            minHeap.add(new Node(source, 0));

            while (!minHeap.isEmpty()) {
                Node current = minHeap.poll();

                for (Node neighbor : adjList.get(current.vertex)) {
                    int newDist = dist[current.vertex] + neighbor.weight;

                    if (newDist < dist[neighbor.vertex]) {
                        dist[neighbor.vertex] = newDist;
                        minHeap.add(new Node(neighbor.vertex, newDist));
                    }
                }
            }

            return dist;
        }
    }

    public static void main(String[] args) {
        int vertices = 5;
        Graph graph = new Graph(vertices);

        graph.addEdge(0, 1, 2);
        graph.addEdge(0, 3, 1);
        graph.addEdge(1, 2, 3);
        graph.addEdge(1, 3, 2);
        graph.addEdge(3, 4, 4);
        graph.addEdge(2, 4, 1);

        int sourceVertex = 0;
        int[] shortestDistances = graph.dijkstra(sourceVertex);

        System.out.println("Shortest distances from source vertex " + sourceVertex + ":");
        for (int i = 0; i < vertices; i++) {
            System.out.println("To " + i + ": " + shortestDistances[i]);
        }
    }
}
