class HamiltonianCycle {
    final int V = 5;
    int path[];

    boolean hamCycleUtil(int graph[][], int pos) {
        if (pos == V) {
            return graph[path[pos - 1]][path[0]] == 1;
        }

        for (int v = 1; v < V; v++) {
            if (isSafe(v, graph, pos)) {
                path[pos] = v;
                if (hamCycleUtil(graph, pos + 1)) {
                    return true;
                }
                path[pos] = -1;
            }
        }
        return false;
    }

    boolean isSafe(int v, int graph[][], int pos) {
        if (graph[path[pos - 1]][v] == 0 || path[pos - 1] == v) {
            return false;
        }
        for (int i = 0; i < pos; i++) {
            if (path[i] == v) {
                return false;
            }
        }
        return true;
    }

    void hamCycle(int graph[][]) {
        path = new int[V];
        path[0] = 0;

        if (!hamCycleUtil(graph, 1)) {
            System.out.println("\nSolution does not exist");
            return;
        }

        printSolution(path);
    }

    void printSolution(int path[]) {
        System.out.println("Solution Exists: Following" +
                " is one Hamiltonian Cycle");
        for (int i = 0; i < V; i++) {
            System.out.print(" " + path[i] + " ");
        }
        System.out.println(" " + path[0] + " ");
    }

    public static void main(String args[]) {
        HamiltonianCycle hamiltonian = new HamiltonianCycle();
        int graph1[][] = {
            {0, 1, 0, 1, 0},
            {1, 0, 1, 1, 1},
            {0, 1, 0, 0, 1},
            {1, 1, 0, 0, 1},
            {0, 1, 1, 1, 0},
        };

        hamiltonian.hamCycle(graph1);

        int graph2[][] = {
            {0, 1, 0, 1, 0},
            {1, 0, 1, 1, 1},
            {0, 1, 0, 0, 1},
            {1, 1, 0, 0, 0},
            {0, 1, 1, 0, 0},
        };

        hamiltonian.hamCycle(graph2);
    }
}
