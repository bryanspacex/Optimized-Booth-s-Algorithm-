import java.util.*;

class Graph {
    private int vertices;
    private List<Edge>[] adjacencyList;

    public Graph(int vertices) {
        this.vertices = vertices;
        adjacencyList = new ArrayList[vertices];
        for (int i = 0; i < vertices; i++) {
            adjacencyList[i] = new ArrayList<>();
        }
    }

    public void addEdge(int source, int destination, int weight) {
        Edge edge = new Edge(source, destination, weight);
        adjacencyList[source].add(edge);
        edge = new Edge(destination, source, weight);
        adjacencyList[destination].add(edge);
    }

    public List<Edge> primMST() {
        boolean[] inMST = new boolean[vertices];
        PriorityQueue<Edge> priorityQueue = new PriorityQueue<>(Comparator.comparingInt(e -> e.weight));
        List<Edge> minimumSpanningTree = new ArrayList<>();


        int startVertex = 0;

        // Adding all edges from the start vertex to the priority queue
        priorityQueue.addAll(adjacencyList[startVertex]);

        inMST[startVertex] = true; // Mark the start vertex as visited

        while (!priorityQueue.isEmpty()) {
            Edge edge = priorityQueue.poll();

            int currentVertex = edge.destination;

            if (inMST[currentVertex]) {
                continue; // Skip if the vertex is already in the MST
            }

            inMST[currentVertex] = true; // Mark the current vertex as visited
            minimumSpanningTree.add(edge); // Add the edge to the MST

            // Add all adjacent edges to the priority queue
            for (Edge adjacentEdge : adjacencyList[currentVertex]) {
                if (!inMST[adjacentEdge.destination]) {
                    priorityQueue.add(adjacentEdge);
                }
            }
        }

        return minimumSpanningTree;
    }

    private static class Edge {
        int source;
        int destination;
        int weight;

        public Edge(int source, int destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }
    }
}

public class PrimAlgorithmExample {
    public static void main(String[] args) {
        int vertices = 5;
        Graph graph = new Graph(vertices);

        // Adding edges with weights
        graph.addEdge(0, 1, 2);
        graph.addEdge(0, 3, 1);
        graph.addEdge(1, 2, 4);
        graph.addEdge(1, 3, 3);
        graph.addEdge(1, 4, 5);
        graph.addEdge(2, 4, 7);
        graph.addEdge(3, 4, 6);

        List<Graph.Edge> minimumSpanningTree = graph.primMST();

        // Print the edges of the minimum spanning tree
        System.out.println("Minimum Spanning Tree Edges:");
        for (Graph.Edge edge : minimumSpanningTree) {
            System.out.println(edge.source + " - " + edge.destination + " : " + edge.weight);
        }
    }
}
